{"remainingRequest":"/Users/sumansaurav/Documents/bhaikacms/node_modules/babel-loader/lib/index.js!/Users/sumansaurav/Documents/bhaikacms/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sumansaurav/Documents/bhaikacms/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sumansaurav/Documents/bhaikacms/src/views/forms/EpisodeForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sumansaurav/Documents/bhaikacms/src/views/forms/EpisodeForm.vue","mtime":1564995462316},{"path":"/Users/sumansaurav/Documents/bhaikacms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sumansaurav/Documents/bhaikacms/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sumansaurav/Documents/bhaikacms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sumansaurav/Documents/bhaikacms/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/sumansaurav/Documents/bhaikacms/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'EpisodeForm',\n  data: function data() {\n    return {\n      episodes: [{\n        season: {\n          id: \"\"\n        },\n        episodeNumber: \"\",\n        episodeTitle: \"\",\n        episodeDescription: \"\",\n        episodeVideoUrl: \"\",\n        episodeImgUrls: {\n          thumbnail: \"\",\n          avatar: \"\"\n        },\n        crewList: null\n      }]\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['season'])),\n  methods: _objectSpread({}, mapActions(['addEpisodes', 'imageUpload']), {\n    addNewEmployeeForm: function addNewEmployeeForm() {\n      this.episodes.push({\n        season: {\n          id: \"\"\n        },\n        episodeNumber: \"\",\n        episodeTitle: \"\",\n        episodeDescription: \"\",\n        episodeVideoUrl: \"\",\n        episodesImageUrls: {\n          thumbnail: \"\",\n          avatar: \"\"\n        },\n        crewList: null\n      });\n    },\n    deleteEmployeeForm: function deleteEmployeeForm(index) {\n      this.episodes.splice(index, 1);\n    },\n    handleSubmit: function handleSubmit() {\n      var _this = this;\n\n      var counter = 1;\n\n      for (var i in this.episodes) {\n        this.episodes[i].season.id = this.season.id;\n        this.episodes[i].episodeNumber = counter++;\n      }\n\n      this.addEpisodes(this.episodes).then(function (resp) {\n        if (resp) {\n          _this.$swal('', 'Successfully added', 'success');\n\n          _this.$router.push('/seasonalVideo');\n        } else {\n          console.log(\"Something went wrong\");\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    processFile: function processFile(event, type, index) {\n      var _this2 = this;\n\n      if (type == 'Thumbnail') {\n        var formData = new FormData();\n        formData.append('image', event.target.files[0]);\n        formData.append('type', 'Thumbnail');\n        this.imageUpload(formData).then(function (resp) {\n          if (resp.uploadLink) {\n            _this2.episodes[index].episodesImageUrls.thumbnail = resp.uploadLink;\n          } else {\n            _this2.$swal('File type not supported');\n          }\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        var _formData = new FormData();\n\n        _formData.append('image', event.target.files[0]);\n\n        _formData.append('type', 'avatar');\n\n        this.imageUpload(_formData).then(function (resp) {\n          if (resp.uploadLink) {\n            _this2.episodes[index].episodesImageUrls.avatar = resp.uploadLink;\n          } else {\n            _this2.$swal('File type not supported');\n          }\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }\n    }\n  })\n};",{"version":3,"sources":["EpisodeForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div class=\"box\">\n    <h2 class=\"form-heading\">EPISODE FORM</h2>\n        <button class=\"btn btn-success\" @click=\"addNewEmployeeForm\">New Episode</button>\n        <div class=\"card mb-3\" v-for=\"(episode,index) in episodes\" :key=\"episode.name\">\n        <div class=\"card-body\" >\n            <span  class=\"float-right\" style=\"cursor:pointer\" @click=\"deleteEmployeeForm(index)\">X</span>\n            <h4 class=\"ard-title\">Episode No {{ index }} </h4>\n            <div class=\"employee-form\">\n                <div class=\"form-row\">\n                    <div class=\"form-group col-md-6\">\n                        <!-- <label>Program type</label> -->\n                        <input v-model=\"season.seasonName\" type=\"text\" class=\"form-control\" required readOnly>\n                    </div>\n                    <div class=\"form-group col-md-6\">\n                        <!-- <label for=\"inputPassword4\">Season name</label> -->\n                        <input v-model=\"episode.episodeTitle\"  type=\"text\" class=\"form-control\" placeholder=\"Episode name\" required>\n                    </div>\n                </div>\n                <div class=\"form-row\">\n                    <div class=\"form-group col-md-6\">\n                        <!-- <label>Program type</label> -->\n                        <input v-model=\"episode.episodeDescription\" type=\"text\" class=\"form-control\" placeholder=\"Description\"  required>\n                    </div>\n                    <div class=\"form-group col-md-6\">\n                        <div class=\"col-md-6\">\n                            <input @change=\"processFile($event,'Thumbnail',index)\" type=\"file\" class=\"form-control\" required>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <input @change=\"processFile($event,'Avatar',index)\" type=\"file\" class=\"form-control\" required>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>  \n    <button @click=\"handleSubmit()\" type=\"submit\" class=\"btn btn-primary btn-submit\">Save episodes</button>\n</div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nexport default {\n    name:'EpisodeForm',\n    data() {\n        return {\n            episodes:[\n                {\n                    season: {\n                        id: \"\"\n                    },\n                    episodeNumber:\"\",\n                    episodeTitle:\"\",\n                    episodeDescription:\"\",\n                    episodeVideoUrl:\"\",\n                    episodeImgUrls:{\n                        thumbnail:\"\",\n                        avatar:\"\"\n                    },\n                    crewList:null,\n                } \n            ]\n        }\n    },\n    computed: {\n        ...mapGetters([\n            'season'\n        ])\n    },\n    methods:{\n        ...mapActions([\n            'addEpisodes',\n            'imageUpload'\n        ]),\n        addNewEmployeeForm(){\n            this.episodes.push({\n                season: {\n                        id: \"\"\n                    },\n                    episodeNumber:\"\",\n                    episodeTitle:\"\",\n                    episodeDescription:\"\",\n                    episodeVideoUrl:\"\",\n                    episodesImageUrls:{\n                        thumbnail:\"\",\n                        avatar:\"\"\n                    },\n                    crewList:null,\n            })\n        },\n        deleteEmployeeForm(index) {\n            this.episodes.splice(index, 1)\n        },\n        handleSubmit() {\n            let counter = 1;\n            for(let i in this.episodes) {\n                this.episodes[i].season.id = this.season.id\n                this.episodes[i].episodeNumber = counter++\n            }\n            this.addEpisodes(this.episodes).then( (resp) => {\n                if(resp) { \n                    this.$swal('','Successfully added','success')\n                    this.$router.push('/seasonalVideo')\n                } else {\n                    console.log(\"Something went wrong\")\n                }\n            }).catch( (err) => {\n                console.log(err)\n            })\n        },\n        processFile(event,type,index) {\n            if (type=='Thumbnail') {\n                let formData = new FormData()\n                formData.append('image', event.target.files[0])\n                formData.append('type','Thumbnail')\n                this.imageUpload(formData).then( (resp) => {\n                    if(resp.uploadLink) {\n                        this.episodes[index].episodesImageUrls.thumbnail = resp.uploadLink\n                    } else {\n                        this.$swal('File type not supported')\n                    }\n                }).catch( (err) => {\n                    console.log(err)\n                })\n            } else {\n                let formData = new FormData()\n                formData.append('image', event.target.files[0])\n                formData.append('type','avatar')\n                this.imageUpload(formData).then( (resp) => {\n                    if(resp.uploadLink) {\n                        this.episodes[index].episodesImageUrls.avatar = resp.uploadLink\n                    } else {\n                        this.$swal('File type not supported')\n                    }\n                }).catch( (err) => {\n                    console.log(err)\n                })\n            }  \n        }\n    }\n}\n</script>\n\n<style scoped>\n.box {\n    padding:10px;\n    height:100vh;\n    border-radius: 10px;\n}\n.form-heading {\n    text-align:center;\n    color: #2980B9;\n}\n.float-right {\n    float:right;\n}\n.card {\n    height:165px;\n    padding:10px;\n    margin-top:10px;\n    margin-bottom:10px;\n    border-radius: 10px;\n    /* border: 0.5px solid #333; */\n\tbox-shadow: 0px 8px 20px 0px rgba(0, 0, 0, 0.15);\n}\n.btn-submit {\n    margin:0 auto;\n    display: block;\n}\n</style>\n"],"sourceRoot":"src/views/forms"}]}